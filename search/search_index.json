{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PC Magik Documentation","text":"<p>This documentation provides comprehensive guides and tutorials for:</p> <ul> <li>\ud83d\udc33 Docker &amp; Container Management</li> <li>\u2638\ufe0f Kubernetes Orchestration</li> <li>\ud83d\udc27 Linux System Administration</li> <li>\ud83d\udda5\ufe0f Proxmox Virtualization</li> <li>\ud83d\udd04 DevOps Practices</li> <li>\ud83e\udd16 Automation Solutions</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Setup Guide</li> <li>Usage Examples</li> <li>Support Options</li> </ul> <p>For full documentation visit our GitHub repository.</p>"},{"location":"about/","title":"About Me","text":"<p>I am an experienced IT specialist with a passion for everything related to Linux, automation, and DevOps. Over the last twelve years, I've developed skills that have allowed me to design, implement, and manage technologically advanced infrastructures.</p>"},{"location":"about/#professional-experience","title":"Professional Experience","text":"<p>My journey to becoming a DevOps specialist has been filled with intense, self-planned weeks of learning and practice. Starting with the fundamentals of DevOps and Git, I solidified my knowledge of continuous integration and code versioning. I immersed myself in the world of containerization, mastering Docker and Docker Compose, which are essential for creating flexible and scalable environments.</p>"},{"location":"about/#ai-and-no-code-automation","title":"AI and No-Code Automation","text":""},{"location":"about/#artificial-intelligence-and-large-language-models","title":"Artificial Intelligence and Large Language Models","text":"<p>Proficient in leveraging AI and LLM technologies to enhance business processes and decision-making. Actively using these models for a variety of applications from work automation to personal assistance.</p>"},{"location":"about/#no-code-automation","title":"No-Code Automation","text":"<p>Skilled in utilizing no-code platforms like Make (formerly Integromat) to automate workflows and integrate services seamlessly without traditional coding. This approach has significantly improved efficiency and allowed for creative solutions in project management and daily tasks. </p>"},{"location":"overview/","title":"Overview","text":"<p>This section is under development. More information will be available soon.</p>"},{"location":"setup/","title":"Setup","text":"<p>This section is under development. More information will be available soon.</p>"},{"location":"setup_docker_debian/","title":"Install Docker Engine on Debian","text":"<p>To get started with Docker Engine on Debian, make sure you meet the prerequisites, and then follow the installation steps.</p>"},{"location":"setup_docker_debian/#prerequisites","title":"Prerequisites","text":""},{"location":"setup_docker_debian/#firewall-limitations","title":"Firewall Limitations","text":"<p>Warning: Before you install Docker, consider the following security implications and firewall incompatibilities:</p> <ul> <li>If you use <code>ufw</code> or <code>firewalld</code> to manage firewall settings, be aware that when you expose container ports using Docker, these ports bypass your firewall rules. For more information, refer to Docker and ufw.</li> <li>Docker is only compatible with <code>iptables-nft</code> and <code>iptables-legacy</code>. Firewall rules created with <code>nft</code> are not supported on a system with Docker installed. Ensure that any firewall rulesets you use are created with <code>iptables</code> or <code>ip6tables</code>, and that you add them to the <code>DOCKER-USER</code> chain. See Packet filtering and firewalls.</li> </ul>"},{"location":"setup_docker_debian/#os-requirements","title":"OS Requirements","text":"<p>To install Docker Engine, you need the 64-bit version of one of these Debian versions:</p> <ul> <li>Debian Bookworm 12 (stable)</li> <li>Debian Bullseye 11 (oldstable)</li> </ul> <p>Docker Engine for Debian is compatible with the following architectures:</p> <ul> <li><code>x86_64</code> (or <code>amd64</code>)</li> <li><code>armhf</code></li> <li><code>arm64</code></li> <li><code>ppc64le</code> (or <code>ppc64el</code>)</li> </ul>"},{"location":"setup_docker_debian/#uninstall-old-versions","title":"Uninstall Old Versions","text":"<p>Before installing Docker Engine, uninstall any conflicting packages. Your Linux distribution may provide unofficial Docker packages, which may conflict with the official packages provided by Docker. Uninstall these packages before proceeding:</p> <ul> <li><code>docker.io</code></li> <li><code>docker-compose</code></li> <li><code>docker-doc</code></li> <li><code>podman-docker</code></li> </ul> <p>Docker Engine depends on <code>containerd</code> and <code>runc</code>, which are bundled as <code>containerd.io</code>. If you have previously installed <code>containerd</code> or <code>runc</code>, uninstall them to avoid conflicts.</p> <p>Run the following command to uninstall all conflicting packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n</code></pre> <p>Note: <code>apt-get</code> might report that none of these packages are installed.</p> <p>Images, containers, volumes, and networks stored in <code>/var/lib/docker/</code> aren't automatically removed when you uninstall Docker. If you want a clean installation, refer to the uninstall Docker Engine section.</p>"},{"location":"setup_docker_debian/#installation-methods","title":"Installation Methods","text":"<p>You can install Docker Engine in different ways, depending on your needs:</p> <ol> <li>Docker Desktop for Linux: The easiest and quickest way to get started.</li> <li>Set up and install Docker Engine from Docker's apt repository.</li> <li>Install manually and manage upgrades manually.</li> <li>Use a convenience script: Recommended only for testing and development environments.</li> </ol>"},{"location":"setup_docker_debian/#install-using-the-apt-repository","title":"Install Using the apt Repository","text":"<p>Before installing Docker Engine for the first time on a new host machine, set up the Docker apt repository. Afterward, you can install and update Docker from the repository.</p>"},{"location":"setup_docker_debian/#set-up-dockers-apt-repository","title":"Set Up Docker's apt Repository","text":"<ol> <li>Add Docker's official GPG key:</li> </ol> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> <ol> <li>Add the repository to Apt sources:</li> </ol> <pre><code>echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <p>Note: If you use a derivative distribution, such as Kali Linux, you may need to substitute the part of this command that prints the version codename:</p> <pre><code>(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\n</code></pre> <p>Replace this part with the codename of the corresponding Debian release, such as <code>bookworm</code>.</p>"},{"location":"setup_docker_debian/#install-the-docker-packages","title":"Install the Docker Packages","text":""},{"location":"setup_docker_debian/#latest-version","title":"Latest Version","text":"<p>To install the latest version, run:</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Verify the installation by running the <code>hello-world</code> image:</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits.</p> <p>Tip: Receiving errors when trying to run without root? The <code>docker</code> user group exists but contains no users, which is why you\u2019re required to use <code>sudo</code> to run Docker commands. Refer to Linux postinstall to allow non-privileged users to run Docker commands.</p>"},{"location":"setup_docker_debian/#upgrade-docker-engine","title":"Upgrade Docker Engine","text":"<p>To upgrade Docker Engine, follow the installation instructions, choosing the new version you want to install.</p>"},{"location":"setup_docker_debian/#install-using-the-convenience-script","title":"Install Using the Convenience Script","text":"<p>Docker provides a convenience script at https://get.docker.com/ to install Docker into development environments non-interactively. This script isn't recommended for production environments but is useful for creating a provisioning script tailored to your needs.</p>"},{"location":"setup_docker_debian/#example","title":"Example","text":"<p>Download and run the script:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Tip: Preview script steps before running by using the <code>--dry-run</code> option:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh ./get-docker.sh --dry-run\n</code></pre>"},{"location":"setup_docker_debian/#uninstall-docker-engine","title":"Uninstall Docker Engine","text":"<p>To uninstall Docker Engine, CLI, <code>containerd</code>, and Docker Compose packages, run:</p> <pre><code>sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n</code></pre> <p>To delete all images, containers, and volumes:</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre> <p>Remove source list and keyrings:</p> <pre><code>sudo rm /etc/apt/sources.list.d/docker.list\nsudo rm /etc/apt/keyrings/docker.asc\n</code></pre> <p>Note: You must delete any edited configuration files manually.</p>"},{"location":"setup_docker_debian/#next-steps","title":"Next Steps","text":"<p>Continue to Post-installation steps for Linux.</p>"},{"location":"setup_docker_postinstallation/","title":"Manage Docker as a Non-Root User","text":"<p>The Docker daemon binds to a Unix socket, not a TCP port. By default, the root user owns the Unix socket, and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the root user.</p> <p>If you don't want to preface the <code>docker</code> command with <code>sudo</code>, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group. On some Linux distributions, the system automatically creates this group when installing Docker Engine using a package manager. In that case, there is no need to manually create the group.</p> <p>Warning The <code>docker</code> group grants root-level privileges to the user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.</p> <p>Note: To run Docker without root privileges, see Run the Docker daemon as a non-root user (Rootless mode).</p>"},{"location":"setup_docker_postinstallation/#steps-to-create-the-docker-group-and-add-your-user","title":"Steps to Create the Docker Group and Add Your User","text":"<ol> <li> <p>Create the docker group:     <pre><code>sudo groupadd docker\n</code></pre></p> </li> <li> <p>Add your user to the docker group:     <pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p>Log out and log back in so that your group membership is re-evaluated.</p> <ul> <li>If you're running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.</li> <li>Alternatively, run the following command to activate the changes to groups:   <pre><code>newgrp docker\n</code></pre></li> </ul> </li> <li> <p>Verify that you can run Docker commands without sudo:     <pre><code>docker run hello-world\n</code></pre>     This command downloads a test image and runs it in a container. When the container runs, it prints a message and exits.</p> </li> </ol>"},{"location":"setup_docker_postinstallation/#fixing-permission-errors","title":"Fixing Permission Errors","text":"<p>If you initially ran Docker CLI commands using <code>sudo</code> before adding your user to the <code>docker</code> group, you may encounter the following error: <pre><code>WARNING: Error loading config file: /home/user/.docker/config.json -\nstat /home/user/.docker/config.json: permission denied\n</code></pre></p> <p>To fix this issue, either:</p> <ul> <li>Remove the <code>~/.docker/</code> directory (it will be recreated automatically, but any custom settings will be lost):   <pre><code>rm -rf ~/.docker\n</code></pre></li> <li>Or change its ownership and permissions:   <pre><code>sudo chown \"$USER\":\"$USER\" /home/\"$USER\"/.docker -R\nsudo chmod g+rwx \"$HOME/.docker\" -R\n</code></pre></li> </ul>"},{"location":"setup_docker_postinstallation/#configure-docker-to-start-on-boot-with-systemd","title":"Configure Docker to Start on Boot with systemd","text":"<p>Many modern Linux distributions use <code>systemd</code> to manage services at boot. On Debian and Ubuntu, the Docker service starts on boot by default. To enable this behavior on other Linux distributions using <code>systemd</code>, run: <pre><code>sudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n</code></pre></p> <p>To disable this behavior, use: <pre><code>sudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n</code></pre></p> <p>You can also use <code>systemd</code> unit files to configure the Docker service on startup. For example, you can add an HTTP proxy, set a different directory for Docker runtime files, or apply other customizations. See Configure the daemon to use a proxy for more details.</p>"},{"location":"setup_docker_postinstallation/#configure-default-logging-driver","title":"Configure Default Logging Driver","text":"<p>Docker provides logging drivers for collecting and viewing log data from all containers running on a host. The default logging driver, <code>json-file</code>, writes log data to JSON-formatted files on the host filesystem. Over time, these log files can grow in size, potentially exhausting disk resources.</p> <p>To avoid disk overuse, consider one of the following options:</p> <ul> <li>Configure the <code>json-file</code> logging driver to enable log rotation.</li> <li>Use an alternative logging driver, such as the <code>local</code> logging driver, which performs log rotation by default.</li> <li>Use a logging driver that sends logs to a remote logging aggregator.</li> </ul>"},{"location":"setup_docker_postinstallation/#next-steps","title":"Next Steps","text":"<p>Explore the Docker workshop to learn how to build an image and run it as a containerized application.</p>"},{"location":"setup_docker_rhel/","title":"Install Docker Engine on RHEL","text":"<p>To get started with Docker Engine on RHEL, ensure you meet the prerequisites and follow the installation steps.</p>"},{"location":"setup_docker_rhel/#prerequisites","title":"Prerequisites","text":""},{"location":"setup_docker_rhel/#os-requirements","title":"OS Requirements","text":"<p>To install Docker Engine, you need a maintained version of one of the following RHEL versions: - RHEL 8 - RHEL 9</p>"},{"location":"setup_docker_rhel/#uninstall-old-versions","title":"Uninstall Old Versions","text":"<p>Before installing Docker Engine, uninstall any conflicting packages. Your Linux distribution may provide unofficial Docker packages that conflict with the official ones. Remove them using the following command:</p> <pre><code>sudo dnf remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine \\\n                  podman \\\n                  runc\n</code></pre> <p>Note: <code>dnf</code> might report that none of these packages are installed. Images, containers, volumes, and networks stored in <code>/var/lib/docker/</code> aren't automatically removed when you uninstall Docker.</p>"},{"location":"setup_docker_rhel/#installation-methods","title":"Installation Methods","text":"<p>You can install Docker Engine in different ways, depending on your needs:</p> <ol> <li>Using Docker's Repositories (Recommended): Set up Docker's repositories for easier installation and upgrades.</li> <li>Manual RPM Installation: Download and install the RPM package manually, useful for air-gapped systems.</li> <li>Automated Convenience Scripts: Use scripts for quick installation in testing and development environments.</li> </ol>"},{"location":"setup_docker_rhel/#install-using-the-rpm-repository","title":"Install Using the RPM Repository","text":""},{"location":"setup_docker_rhel/#step-1-set-up-the-repository","title":"Step 1: Set Up the Repository","text":"<p>Install the <code>dnf-plugins-core</code> package and add the Docker repository:</p> <pre><code>sudo dnf -y install dnf-plugins-core\nsudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo\n</code></pre>"},{"location":"setup_docker_rhel/#step-2-install-docker-engine","title":"Step 2: Install Docker Engine","text":"<p>To install the latest version:</p> <pre><code>sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Verify the GPG key fingerprint matches <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code> before accepting it.</p> <p>Start Docker and enable it to start on boot:</p> <pre><code>sudo systemctl enable --now docker\n</code></pre> <p>Verify the installation:</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>Tip: If you encounter permission errors, refer to the Linux post-installation steps to allow non-root users to run Docker commands.</p>"},{"location":"setup_docker_rhel/#install-from-a-package","title":"Install from a Package","text":"<p>If you can't use Docker's repository, download the <code>.rpm</code> files for your RHEL version from Docker's download page. Install them using:</p> <pre><code>sudo dnf install ./containerd.io-&lt;version&gt;.&lt;arch&gt;.rpm \\\n  ./docker-ce-&lt;version&gt;.&lt;arch&gt;.rpm \\\n  ./docker-ce-cli-&lt;version&gt;.&lt;arch&gt;.rpm \\\n  ./docker-buildx-plugin-&lt;version&gt;.&lt;arch&gt;.rpm \\\n  ./docker-compose-plugin-&lt;version&gt;.&lt;arch&gt;.rpm\n</code></pre> <p>Start Docker:</p> <pre><code>sudo systemctl enable --now docker\n</code></pre> <p>Verify the installation:</p> <pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"setup_docker_rhel/#install-using-the-convenience-script","title":"Install Using the Convenience Script","text":"<p>Docker provides a script for non-interactive installation. Use it for development environments only:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Tip: Use the <code>--dry-run</code> option to preview the script's steps before running it.</p>"},{"location":"setup_docker_rhel/#install-pre-releases","title":"Install Pre-Releases","text":"<p>To install pre-releases of Docker, use the test channel script:</p> <pre><code>curl -fsSL https://test.docker.com -o test-docker.sh\nsudo sh test-docker.sh\n</code></pre>"},{"location":"setup_docker_rhel/#upgrade-docker-engine","title":"Upgrade Docker Engine","text":"<p>To upgrade Docker, follow the installation instructions for the desired version. If using manual RPM installation, replace <code>dnf install</code> with <code>dnf upgrade</code>.</p>"},{"location":"setup_docker_rhel/#uninstall-docker-engine","title":"Uninstall Docker Engine","text":"<p>Remove Docker packages:</p> <pre><code>sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n</code></pre> <p>To delete all images, containers, and volumes:</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre> <p>Note: Manually delete any edited configuration files.</p>"},{"location":"setup_docker_rhel/#next-steps","title":"Next Steps","text":"<p>Continue to Post-installation steps for Linux.</p>"},{"location":"setup_docker_rootless/","title":"Rootless Mode","text":"<p>Rootless mode allows running the Docker daemon and containers as a non-root user to mitigate potential vulnerabilities in the daemon and the container runtime. It does not require root privileges during installation, provided the prerequisites are met.</p>"},{"location":"setup_docker_rootless/#how-it-works","title":"How It Works","text":"<p>Rootless mode executes the Docker daemon and containers inside a user namespace. Unlike userns-remap mode, where the daemon runs with root privileges, in rootless mode, both the daemon and containers run without root privileges. It avoids using binaries with SETUID bits or file capabilities, except for <code>newuidmap</code> and <code>newgidmap</code>, which enable multiple UIDs/GIDs in the user namespace.</p>"},{"location":"setup_docker_rootless/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>newuidmap</code> and <code>newgidmap</code> (provided by the <code>uidmap</code> package on most distributions).</li> <li>Ensure <code>/etc/subuid</code> and <code>/etc/subgid</code> contain at least 65,536 subordinate UIDs/GIDs for the user.</li> </ol> <p>Example: <pre><code>id -u\n1001\nwhoami\ntestuser\ngrep ^$(whoami): /etc/subuid\ntestuser:231072:65536\ngrep ^$(whoami): /etc/subgid\ntestuser:231072:65536\n</code></pre></p>"},{"location":"setup_docker_rootless/#distribution-specific-hints","title":"Distribution-Specific Hints","text":""},{"location":"setup_docker_rootless/#ubuntu","title":"Ubuntu","text":"<ul> <li>Install <code>dbus-user-session</code> and <code>uidmap</code> packages:     <pre><code>sudo apt-get install -y dbus-user-session uidmap\n</code></pre></li> <li>If using a terminal where the user was not directly logged in, install <code>systemd-container</code>:     <pre><code>sudo apt-get install -y systemd-container\nsudo machinectl shell TheUser@\n</code></pre></li> <li>For Ubuntu 24.04 and later, configure AppArmor for unprivileged user namespaces if needed.</li> </ul>"},{"location":"setup_docker_rootless/#other-distributions","title":"Other Distributions","text":"<p>Refer to the specific instructions for Debian, Arch Linux, openSUSE, CentOS, RHEL, and Fedora.</p>"},{"location":"setup_docker_rootless/#known-limitations","title":"Known Limitations","text":"<ul> <li>Supported storage drivers:</li> <li><code>overlay2</code> (kernel 5.11+ or Ubuntu-flavored kernel)</li> <li><code>fuse-overlayfs</code> (kernel 4.18+)</li> <li><code>btrfs</code> (with <code>user_subvol_rm_allowed</code> mount option)</li> <li><code>vfs</code></li> <li>Cgroup v2 and systemd are required for resource limiting.</li> <li>Unsupported features:</li> <li>AppArmor</li> <li>Checkpoint</li> <li>Overlay network</li> <li>Exposing SCTP ports</li> <li>Networking limitations:</li> <li>IP address in <code>docker inspect</code> is namespaced.</li> <li>Host network (<code>--net=host</code>) is namespaced.</li> <li>NFS mounts as <code>data-root</code> are not supported.</li> </ul>"},{"location":"setup_docker_rootless/#installation","title":"Installation","text":""},{"location":"setup_docker_rootless/#with-packages-rpmdeb","title":"With Packages (RPM/DEB)","text":"<ol> <li>Run the setup tool as a non-root user:     <pre><code>dockerd-rootless-setuptool.sh install\n</code></pre></li> <li>Add the following to <code>~/.bashrc</code>:     <pre><code>export PATH=/usr/bin:$PATH\nexport DOCKER_HOST=unix:///run/user/1000/docker.sock\n</code></pre></li> </ol>"},{"location":"setup_docker_rootless/#without-packages","title":"Without Packages","text":"<p>Install <code>docker-ce-rootless-extras</code> manually: <pre><code>sudo apt-get install -y docker-ce-rootless-extras\n</code></pre></p> <p>If the system-wide Docker daemon is already running, consider disabling it: <pre><code>sudo systemctl disable --now docker.service docker.socket\nsudo rm /var/run/docker.sock\n</code></pre></p> <p>Run the setup tool: <pre><code>dockerd-rootless-setuptool.sh install\n</code></pre></p> <p>Add the following to <code>~/.bashrc</code>: <pre><code>export PATH=/usr/bin:$PATH\nexport DOCKER_HOST=unix:///run/user/1000/docker.sock\n</code></pre></p>"},{"location":"setup_docker_rootless/#uninstallation","title":"Uninstallation","text":"<p>To remove the systemd service of the Docker daemon: <pre><code>dockerd-rootless-setuptool.sh uninstall\n</code></pre></p> <p>Unset environment variables <code>PATH</code> and <code>DOCKER_HOST</code> if added to <code>~/.bashrc</code>. To remove data: <pre><code>rootlesskit rm -rf ~/.local/share/docker\n</code></pre></p> <p>To remove binaries, delete the <code>docker-ce-rootless-extras</code> package or manually remove binaries under <code>~/bin</code>.</p>"},{"location":"setup_docker_rootless/#usage","title":"Usage","text":""},{"location":"setup_docker_rootless/#daemon-management","title":"Daemon Management","text":"<p>With systemd: <pre><code>systemctl --user start docker\nsystemctl --user enable docker\nsudo loginctl enable-linger $(whoami)\n</code></pre></p>"},{"location":"setup_docker_rootless/#client-configuration","title":"Client Configuration","text":"<p>Specify the socket path: <pre><code>export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock\ndocker run -d -p 8080:80 nginx\n</code></pre></p> <p>Or use CLI context: <pre><code>docker context use rootless\ndocker run -d -p 8080:80 nginx\n</code></pre></p>"},{"location":"setup_docker_rootless/#best-practices","title":"Best Practices","text":""},{"location":"setup_docker_rootless/#running-rootless-docker-in-docker","title":"Running Rootless Docker in Docker","text":"<p>Use the <code>docker:&lt;version&gt;-dind-rootless</code> image: <pre><code>docker run -d --name dind-rootless --privileged docker:25.0-dind-rootless\n</code></pre></p>"},{"location":"setup_docker_rootless/#exposing-docker-api-socket","title":"Exposing Docker API Socket","text":"<p>Expose through TCP: <pre><code>DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS=\"-p 0.0.0.0:2376:2376/tcp\" \\\ndockerd-rootless.sh -H tcp://0.0.0.0:2376 --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem\n</code></pre></p> <p>Expose through SSH: <pre><code>ssh -l REMOTEUSER REMOTEHOST 'echo $DOCKER_HOST'\ndocker -H ssh://REMOTEUSER@REMOTEHOST run ...\n</code></pre></p>"},{"location":"setup_docker_rootless/#resource-limiting","title":"Resource Limiting","text":"<p>Use cgroup v2 and systemd for resource limiting: <pre><code>mkdir -p /etc/systemd/system/user@.service.d\ncat &gt; /etc/systemd/system/user@.service.d/delegate.conf &lt;&lt; EOF\n[Service]\nDelegate=cpu cpuset io memory pids\nEOF\nsystemctl daemon-reload\n</code></pre></p>"},{"location":"setup_docker_rootless/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup_docker_rootless/#common-errors","title":"Common Errors","text":"<ul> <li>Systemd not detected: Use <code>dockerd-rootless.sh</code> manually.</li> <li>Unprivileged user namespace disabled: Set <code>kernel.unprivileged_userns_clone=1</code> in <code>/etc/sysctl.conf</code>.</li> <li>Insufficient subuid/subgid ranges: Configure <code>/etc/subuid</code> and <code>/etc/subgid</code>.</li> </ul>"},{"location":"setup_docker_rootless/#networking-issues","title":"Networking Issues","text":"<ul> <li>Ping doesn't work: Add <code>net.ipv4.ping_group_range = 0 2147483647</code> to <code>/etc/sysctl.conf</code>.</li> <li>Slow network: Install <code>slirp4netns</code> or adjust MTU.</li> </ul> <p>For more details, refer to the official Docker documentation. ```</p>"},{"location":"setup_docker_ubuntu/","title":"Install Docker Engine on Ubuntu","text":"<p>To get started with Docker Engine on Ubuntu, ensure you meet the prerequisites and follow the installation steps.</p>"},{"location":"setup_docker_ubuntu/#prerequisites","title":"Prerequisites","text":""},{"location":"setup_docker_ubuntu/#firewall-limitations","title":"Firewall Limitations","text":"<p>Warning: Before installing Docker, consider the following security implications and firewall incompatibilities:</p> <ul> <li>If you use <code>ufw</code> or <code>firewalld</code> to manage firewall settings, be aware that exposing container ports using Docker bypasses your firewall rules. For more information, refer to Docker and ufw.</li> <li>Docker is only compatible with <code>iptables-nft</code> and <code>iptables-legacy</code>. Firewall rules created with <code>nft</code> are not supported. Ensure your firewall rulesets are created with <code>iptables</code> or <code>ip6tables</code> and added to the <code>DOCKER-USER</code> chain. See Packet filtering and firewalls.</li> </ul>"},{"location":"setup_docker_ubuntu/#os-requirements","title":"OS Requirements","text":"<p>To install Docker Engine, you need the 64-bit version of one of these Ubuntu versions:</p> <ul> <li>Ubuntu Oracular 24.10</li> <li>Ubuntu Noble 24.04 (LTS)</li> <li>Ubuntu Jammy 22.04 (LTS)</li> <li>Ubuntu Focal 20.04 (LTS)</li> </ul> <p>Docker Engine for Ubuntu is compatible with the following architectures: <code>x86_64</code> (or <code>amd64</code>), <code>armhf</code>, <code>arm64</code>, <code>s390x</code>, and <code>ppc64le</code> (ppc64el).</p> <p>Note: Installation on Ubuntu derivative distributions, such as Linux Mint, is not officially supported (though it may work).</p>"},{"location":"setup_docker_ubuntu/#uninstall-old-versions","title":"Uninstall Old Versions","text":"<p>Before installing Docker Engine, uninstall any conflicting packages. Your Linux distribution may provide unofficial Docker packages that conflict with the official packages provided by Docker. Uninstall these packages before proceeding.</p>"},{"location":"setup_docker_ubuntu/#unofficial-packages-to-uninstall","title":"Unofficial Packages to Uninstall","text":"<ul> <li><code>docker.io</code></li> <li><code>docker-compose</code></li> <li><code>docker-compose-v2</code></li> <li><code>docker-doc</code></li> <li><code>podman-docker</code></li> </ul> <p>Docker Engine depends on <code>containerd</code> and <code>runc</code>, which are bundled as <code>containerd.io</code>. If you have previously installed <code>containerd</code> or <code>runc</code>, uninstall them to avoid conflicts.</p> <p>Run the following command to uninstall all conflicting packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n</code></pre> <p>Note: <code>apt-get</code> might report that none of these packages are installed.</p> <p>Images, containers, volumes, and networks stored in <code>/var/lib/docker/</code> aren't automatically removed when you uninstall Docker. To start with a clean installation, refer to the uninstall Docker Engine section.</p>"},{"location":"setup_docker_ubuntu/#installation-methods","title":"Installation Methods","text":"<p>You can install Docker Engine in different ways, depending on your needs:</p> <ol> <li>Docker Desktop for Linux: Bundles Docker Engine and is the easiest way to get started.</li> <li>Using Docker's apt repository: Set up and install Docker Engine from Docker's repository.</li> <li>Manual installation: Download and install <code>.deb</code> packages manually.</li> <li>Convenience script: Recommended only for testing and development environments.</li> </ol>"},{"location":"setup_docker_ubuntu/#install-using-the-apt-repository","title":"Install Using the apt Repository","text":"<p>Before installing Docker Engine for the first time on a new host machine, set up the Docker apt repository. Afterward, you can install and update Docker from the repository.</p>"},{"location":"setup_docker_ubuntu/#set-up-dockers-apt-repository","title":"Set Up Docker's apt Repository","text":"<ol> <li>Add Docker's official GPG key:</li> </ol> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> <ol> <li>Add the repository to Apt sources:</li> </ol> <pre><code>echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre>"},{"location":"setup_docker_ubuntu/#install-docker-packages","title":"Install Docker Packages","text":"<p>To install the latest version of Docker Engine, run:</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Verify the installation by running the <code>hello-world</code> image:</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits.</p> <p>Tip: If you encounter errors when trying to run Docker without <code>sudo</code>, refer to the Linux post-installation steps to allow non-privileged users to run Docker commands.</p>"},{"location":"setup_docker_ubuntu/#upgrade-docker-engine","title":"Upgrade Docker Engine","text":"<p>To upgrade Docker Engine, follow the installation instructions and choose the new version you want to install.</p>"},{"location":"setup_docker_ubuntu/#install-using-the-convenience-script","title":"Install Using the Convenience Script","text":"<p>Docker provides a convenience script at https://get.docker.com/ to install Docker non-interactively. This script is useful for development environments but not recommended for production.</p>"},{"location":"setup_docker_ubuntu/#example","title":"Example","text":"<p>Download and run the script:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Tip: Use the <code>--dry-run</code> option to preview the script steps before running it.</p>"},{"location":"setup_docker_ubuntu/#uninstall-docker-engine","title":"Uninstall Docker Engine","text":"<p>To uninstall Docker Engine, CLI, <code>containerd</code>, and Docker Compose packages, run:</p> <pre><code>sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n</code></pre> <p>To delete all images, containers, and volumes:</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre> <p>Remove source list and keyrings:</p> <pre><code>sudo rm /etc/apt/sources.list.d/docker.list\nsudo rm /etc/apt/keyrings/docker.asc\n</code></pre> <p>You must manually delete any edited configuration files.</p>"},{"location":"setup_docker_ubuntu/#next-steps","title":"Next Steps","text":"<p>Continue to Post-installation steps for Linux.</p>"},{"location":"setup_docker_wsl/","title":"Setting Up Docker with WSL","text":""},{"location":"setup_docker_wsl/#1-install-and-configure-wsl","title":"1. Install and Configure WSL","text":""},{"location":"setup_docker_wsl/#enable-wsl-features","title":"Enable WSL Features","text":"<p>Open the command line as administrator and run the following commands to enable WSL features:</p> <p><pre><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n</code></pre> <pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre></p>"},{"location":"setup_docker_wsl/#install-the-linux-kernel-update-package","title":"Install the Linux Kernel Update Package","text":"<p>Download and install the latest Linux kernel update package from Microsoft:</p> <p>Download wsl_update_x64.msi</p> <p>After installation, restart Windows.</p>"},{"location":"setup_docker_wsl/#set-wsl-to-version-2","title":"Set WSL to Version 2","text":"<p>Run the following command as administrator to set WSL to version 2:</p> <pre><code>wsl --set-default-version 2\n</code></pre> <p>Restart Windows again to apply the changes.</p>"},{"location":"setup_docker_wsl/#2-enable-systemd-in-wsl","title":"2. Enable Systemd in WSL","text":""},{"location":"setup_docker_wsl/#check-wsl-version","title":"Check WSL Version","text":"<p>Ensure you are running WSL version <code>0.67.6</code> or higher. Check your version with:</p> <pre><code>wsl --version\n</code></pre> <p>If the command fails, upgrade to the Microsoft Store version of WSL. Run the following command to update:</p> <pre><code>wsl --update\n</code></pre>"},{"location":"setup_docker_wsl/#alternatively-download-the-latest-release-from-the","title":"Alternatively, download the latest release from the:","text":"<p>WSL release page.</p>"},{"location":"setup_docker_wsl/#configure-systemd","title":"Configure Systemd","text":"<p>Edit the <code>wsl.conf</code> file to enable systemd. Open the file with sudo privileges:</p> <pre><code>sudo nano /etc/wsl.conf\n</code></pre> <p>Add the following lines:</p> <pre><code>[boot]\nsystemd=true\n</code></pre> <p>Save and exit the editor (<code>CTRL+O</code>, then <code>CTRL+X</code>).</p>"},{"location":"setup_docker_wsl/#restart-wsl","title":"Restart WSL","text":"<p>Close your WSL instance and run the following command in PowerShell to restart WSL:</p> <pre><code>wsl.exe --shutdown\n</code></pre> <p>Launch your WSL instance again and verify systemd is running:</p> <pre><code>systemctl list-unit-files --type=service\n</code></pre> <p>For more details, refer to the official blog post.</p>"},{"location":"setup_docker_wsl/#3-install-docker-and-docker-compose-v2-in-wsl-2","title":"3. Install Docker and Docker Compose v2 in WSL 2","text":""},{"location":"setup_docker_wsl/#install-docker","title":"Install Docker","text":"<p>Run the following commands to install Docker:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre>"},{"location":"setup_docker_wsl/#add-your-user-to-the-docker-group","title":"Add Your User to the Docker Group","text":"<p>Add your user to the Docker group to avoid using <code>sudo</code> with Docker commands:</p> <pre><code>sudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"setup_docker_wsl/#verify-installation","title":"Verify Installation","text":"<p>Check that Docker and Docker Compose were installed successfully:</p> <pre><code>docker --version\ndocker compose version\n</code></pre>"},{"location":"setup_docker_wsl/#4-additional-step-for-ubuntu-2204-or-debian-10","title":"4. Additional Step for Ubuntu 22.04 or Debian 10+","text":"<p>If you're using Ubuntu 22.04 or Debian 10+, configure <code>iptables</code> for compatibility:</p> <pre><code>sudo update-alternatives --config iptables\n</code></pre> <p>Select option <code>1</code> to use <code>iptables-legacy</code>.</p>"},{"location":"setup_docker_wsl/#start-docker","title":"Start Docker","text":"<p>Start the Docker service:</p> <pre><code>sudo service docker start\n</code></pre> <p>Check the status of Docker:</p> <pre><code>sudo service docker status\n</code></pre> <p>Note: You may need to reboot Windows or restart WSL after applying the <code>iptables</code> configuration to ensure networking inside your containers works correctly.</p>"},{"location":"setup_ssh/","title":"Setting Up SSH Keys","text":"<p>Follow the steps below to set up SSH keys:</p>"},{"location":"setup_ssh/#1-create-the-ssh-directory","title":"1. Create the <code>.ssh</code> Directory","text":"<pre><code>mkdir -p ~/.ssh\ncd ~/.ssh\n</code></pre>"},{"location":"setup_ssh/#2-generate-an-ssh-key-pair","title":"2. Generate an SSH Key Pair","text":"<pre><code>ssh-keygen -b 4096 -t rsa -f pcmagik-zurich-arm-docker-pcmagik-com\n</code></pre>"},{"location":"setup_ssh/#3-add-the-public-key-to-authorized_keys","title":"3. Add the Public Key to <code>authorized_keys</code>","text":"<p>You can use one of the following methods:</p>"},{"location":"setup_ssh/#method-1-append-the-key","title":"Method 1: Append the Key","text":"<pre><code>cat ~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre>"},{"location":"setup_ssh/#method-2-echo-the-key","title":"Method 2: Echo the Key","text":"<p>Replace <code>YOUR_PUBLIC_KEY</code> with your actual public key: <pre><code>echo \"YOUR_PUBLIC_KEY\" &gt;&gt; ~/.ssh/authorized_keys\n</code></pre></p>"},{"location":"setup_ssh/#4-set-permissions","title":"4. Set Permissions","text":"<pre><code>chmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n</code></pre>"},{"location":"setup_ssh/#5-install-putty-tools","title":"5. Install <code>putty-tools</code>","text":"<pre><code>sudo apt install putty-tools\n</code></pre>"},{"location":"setup_ssh/#6-convert-the-private-key-to-ppk-format","title":"6. Convert the Private Key to PPK Format","text":"<pre><code>puttygen ~/pcmagik-zurich-arm-docker-pcmagik-com -o ~/.ssh/pcmagik-zurich-arm-docker-gronioss-pamagik-com.ppk\n</code></pre>"},{"location":"setup_ssh/#7-copy-keys-to-the-ubuntu-users-home-directory","title":"7. Copy Keys to the <code>ubuntu</code> User's Home Directory","text":"<pre><code>sudo cp pcmagik-zurich-arm-docker-pcmagik-com /home/ubuntu/\nsudo cp pcmagik-zurich-arm-docker-pcmagik-com.pub /home/ubuntu/\n</code></pre>"},{"location":"setup_ssh/#8-change-ownership-of-the-keys","title":"8. Change Ownership of the Keys","text":"<pre><code>sudo chown ubuntu:ubuntu /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com\nsudo chown ubuntu:ubuntu /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com.pub\n</code></pre>"},{"location":"setup_vps/","title":"Complete Configuration Guide for Ubuntu 24.04 LTS ARM64 VPS Server","text":""},{"location":"setup_vps/#set-the-timezone-to-warsaw","title":"Set the Timezone to Warsaw","text":"<pre><code>sudo timedatectl set-timezone Europe/Warsaw\n</code></pre>"},{"location":"setup_vps/#minimize-the-installation","title":"Minimize the Installation","text":"<pre><code>sudo unminimize\n</code></pre>"},{"location":"setup_vps/#install-git-and-github-cli","title":"Install Git and GitHub CLI","text":"<pre><code>sudo apt-get update\nsudo apt-get install git gh -y\n</code></pre>"},{"location":"setup_vps/#add-a-new-user-and-grant-sudo-privileges","title":"Add a New User and Grant Sudo Privileges","text":"<p>Replace <code>pcmagik</code> with your desired username. <pre><code>sudo adduser pcmagik\nsudo usermod -aG sudo pcmagik\n</code></pre></p>"},{"location":"setup_vps/#add-no-pssword-sudo-access-for-the-new-user","title":"Add no pssword sudo access for the new user","text":"<pre><code>echo \"pcmagik ALL=(ALL) NOPASSWD:ALL\" | sudo tee /etc/sudoers.d/pcmagik\nsudo chmod 0440 /etc/sudoers.d/pcmagik\n</code></pre>"},{"location":"setup_vps/#set-up-ssh-keys-for-the-new-user","title":"Set Up SSH Keys for the New User","text":""},{"location":"setup_vps/#1-create-the-ssh-directory","title":"1. Create the <code>.ssh</code> Directory","text":"<pre><code>mkdir -p ~/.ssh\ncd ~/.ssh\n</code></pre>"},{"location":"setup_vps/#2-generate-an-ssh-key-pair","title":"2. Generate an SSH Key Pair","text":"<pre><code>ssh-keygen -b 4096 -t rsa -f pcmagik-zurich-arm-docker-pcmagik-com\n</code></pre>"},{"location":"setup_vps/#3-add-the-public-key-to-authorized_keys","title":"3. Add the Public Key to <code>authorized_keys</code>","text":""},{"location":"setup_vps/#method-1-append-the-key","title":"Method 1: Append the Key","text":"<pre><code>cat ~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre>"},{"location":"setup_vps/#4-set-permissions","title":"4. Set Permissions","text":"<pre><code>chmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n</code></pre>"},{"location":"setup_vps/#5-install-putty-tools","title":"5. Install <code>putty-tools</code>","text":"<pre><code>sudo apt install putty-tools\n</code></pre>"},{"location":"setup_vps/#6-convert-the-private-key-to-ppk-format","title":"6. Convert the Private Key to PPK Format","text":""},{"location":"setup_vps/#puttygen-pcmagik-zurich-arm-docker-pcmagik-com-o-sshpcmagik-zurich-arm-docker-gronioss-pamagik-comppk","title":"<pre><code>puttygen ~/pcmagik-zurich-arm-docker-pcmagik-com -o ~/.ssh/pcmagik-zurich-arm-docker-gronioss-pamagik-com.ppk\n</code></pre>","text":""},{"location":"setup_vps/#chicken-and-egg-problem-with-ssh-keys","title":"Chicken and Egg Problem with SSH Keys","text":"<p>Now we need to copy the keys to local machine, and we have three options:</p>"},{"location":"setup_vps/#option-1-use-scp-if-password-authentication-is-enabled","title":"Option 1: Use <code>scp</code> (if password authentication is enabled)","text":""},{"location":"setup_vps/#for-windows-powershell","title":"For Windows (PowerShell):","text":"<pre><code>scp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com C:\\Users\\YourUser\\Downloads\\\nscp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub C:\\Users\\YourUser\\Downloads\\\nscp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-gronioss-pamagik-com.ppk C:\\Users\\YourUser\\Downloads\\\n</code></pre>"},{"location":"setup_vps/#for-linuxmacos","title":"For Linux/macOS:","text":"<pre><code>scp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com ~/Downloads/\nscp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub ~/Downloads/\nscp your_user@server_address:~/.ssh/pcmagik-zurich-arm-docker-gronioss-pamagik-com.ppk ~/Downloads/\n</code></pre>"},{"location":"setup_vps/#alternative-use-ssh-copy-id","title":"Alternative: Use <code>ssh-copy-id</code>","text":"<p>If you have password authentication to the server, you can use <code>ssh-copy-id</code> to copy the public key to the server. This will allow you to log in without a password. But you need to generate the keys first on local machine and copy them to the server. <pre><code>ssh-copy-id -i ~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub your_user@server_address\n</code></pre></p>"},{"location":"setup_vps/#option-2-copy-via-another-user-if-you-only-have-ssh-key-authentication","title":"Option 2: Copy via another user (if you only have SSH key authentication)","text":""},{"location":"setup_vps/#21-copy-keys-to-the-ubuntu-users-home-directory","title":"2.1 Copy Keys to the <code>ubuntu</code> User's Home Directory","text":"<pre><code>sudo cp pcmagik-zurich-arm-docker-pcmagik-com /home/ubuntu/\nsudo cp pcmagik-zurich-arm-docker-pcmagik-com.pub /home/ubuntu/\n</code></pre>"},{"location":"setup_vps/#22-change-ownership-and-permissions-of-the-keys","title":"2.2 Change Ownership and Permissions of the Keys","text":"<pre><code>sudo chown ubuntu:ubuntu /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com\nsudo chown ubuntu:ubuntu /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com.pub\nsudo chmod 600 /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com\nsudo chmod 644 /home/ubuntu/pcmagik-zurich-arm-docker-pcmagik-com.pub\n</code></pre>"},{"location":"setup_vps/#option-3-manual-copy-paste","title":"Option 3: Manual Copy-Paste","text":"<p>Just use \"cat\" command to show private and public keys, copy and save it to your local machine: <pre><code>cat ~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com.pub\ncat ~/.ssh/pcmagik-zurich-arm-docker-pcmagik-com\n</code></pre></p>"},{"location":"setup_vps/#bonus","title":"BONUS","text":"<p>If You want to block root login and password authentication, you can do it with the following command: <pre><code>sudo sed -i 's/^#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config &amp;&amp; sudo sed -i 's/^PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config &amp;&amp; sudo systemctl restart sshd\n</code></pre> If you want to allow password authentication for the new user, you can do it with the following command: <pre><code>sudo sed -i 's/^PermitRootLogin no/PermitRootLogin yes/' /etc/ssh/sshd_config &amp;&amp; sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config &amp;&amp; sudo systemctl restart sshd\n</code></pre> When You have password authentication enabled, you can use the following command to connect to the server, make directory and copy the public key to the server: <pre><code>ssh u\u017cytkownik@adres_serwera -p port \"mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh\" &amp;&amp; scp -P port ~/.ssh/lokalizacja/klucz.pub u\u017cytkownik@adres_serwera:~/.ssh/authorized_keys\n</code></pre></p>"},{"location":"setup_vps/#github-authentication","title":"GitHub Authentication","text":"<pre><code>gh auth login\n</code></pre>"},{"location":"setup_vps/#set-global-git-configurations","title":"Set Global Git Configurations","text":"<pre><code>git config --global user.name \"Mateusz Piekut\"\ngit config --global user.email \"serwis.pcmagik@gmail.com\"\n</code></pre>"},{"location":"setup_vps/#update-upgrade-and-clean-the-system","title":"Update, Upgrade, and Clean the System","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y\nsudo apt-get dist-upgrade -y\nsudo apt-get autoremove -y\n</code></pre>"},{"location":"setup_vps/#install-comprehensive-tools","title":"Install Comprehensive Tools","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install mc nano net-tools iputils-ping curl wget git htop tcpdump traceroute vim zip unzip neofetch ncat cifs-utils bash-completion hstr -y\n</code></pre>"},{"location":"setup_vps/#install-crowdsec-for-system-protection","title":"Install CrowdSec for System Protection","text":"<pre><code>curl -s https://install.crowdsec.net | sudo sh\nsudo apt install crowdsec\nsudo apt install crowdsec-firewall-bouncer-iptables\nsudo systemctl restart crowdsec\n</code></pre>"},{"location":"setup_vps/#install-docker","title":"Install Docker","text":"<pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre>"},{"location":"setup_vps/#add-current-user-to-docker-group-and-refresh-group-membership","title":"Add Current User to Docker Group and Refresh Group Membership","text":"<pre><code>sudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"setup_vps/#test-docker-installation","title":"Test Docker Installation","text":"<pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"setup_vps/#run-portainer","title":"Run Portainer","text":"<pre><code>docker volume create portainer_data\ndocker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"support/","title":"Support / Donate","text":"<p>If you'd like to support my work, you can do so via:</p> <p></p> <p>Your support helps me continue developing documentation and tools.</p>"},{"location":"usage/","title":"Usage","text":"<p>This section is under development. More information will be available soon.</p>"}]}